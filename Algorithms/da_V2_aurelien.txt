module(main;;)
---*
paths[15][7] = "dws_1/","dws_2/","dws_11/","jog_9/","jog_16/","sit_5/","sit13/"…

pFileOutliers = opening the file (in append mod)
if(pFileOutliers == NULL)
print "Error when opening the file: review_outliers" 
exit
else

iMovement = 0
// We run through our 15 files containing the movements
while (iMovement < 15)
iSub = 1

// We run through our 24 movements (sub)
while (iSub <= 24)
url = paths[iMovement] + "sub" + iSub  + ".csv"
pFileMovements = opening the file (in read mod) from the url

if(pFileMovements == NULL)
// url, nbLignes, isMissingValue
print "Error when opening the file: " + url + "0,0,"
exit
else

line = get the line of pFileMovements 

lineOutlier = paths[iMovement] + "," // Name movement

nbLine = 0
time = 0
missingTime = 0
nbOutliersX, nbOutliersY, nbOutliersZ = 0
outliersX, outliersY, outliersZ = [] ou liste chainée
// We read each line of the csv
while (line != EOF) // End Of File

// this function will change a line from csv to a tab [index, accelerationsX, accelerationsY, accelerationsZ]
module(getTabLine;line;tabLine)

if (tabLine[0] - time > 1)
missingTime = 1
else
time = tabLine[0]
endif

module(checkingLineOutliers;tabLine, nbOutliersX, nbOutliersY, nbOutliersZ, outliersX, outliersY, outliersZ;nbOutliersX, nbOutliersY, nbOutliersZ, outliersX, outliersY, outliersZ)

line = get the line of pFileMovements 
nbLine++
endwhile

lineOutlier += nbLine + "," + missingTime + "," 
+ nbOutliersX + "," + outliersX.split(",") 
+ nbOutliersY + "," + outliersY.split(",")
+ nbOutliersZ + "," + outliersZ.split(",")

module(writeOutlier;pFileOutlier, lineOutlier ;pFileOutlier)

close pFileMovements 
iSub++
endif
endwhile
iMovement++
endwhile
close pFileOutliers
endif
------


module(checkingLineOutliers;tabLine, nbOutliersX, nbOutliersY, nbOutliersZ, outliersX, outliersY, outliersZ;nbOutliersX, nbOutliersY, nbOutliersZ, outliersX, outliersY, outliersZ)
---*
means = [0.00096087, 0.05525659, 0.0352192] // normal law of mean α
standard_deviations = [0.38875666, 0.61937128, 0.4300345] // standard_deviation β


if(condition X aberrant)
outliersX.add(tabLine[0])
outliersX.add(tabLine[1])
nbOutliersX++
endif

if(condition Y aberrant)
outliersY.add(tabLine[0])
outliersY.add(tabLine[2])
nbOutliersY++
endif

if(condition Z aberrant)
outliersZ.add(tabLine[0])
outliersZ.add(tabLine[3])
nbOutliersZ++
endif
------


module(writeOutlier;pFileOutlier, lineOutlier ;pFileOutlier)
---*
write in pFileOutlier new line : lineOutlier
------




